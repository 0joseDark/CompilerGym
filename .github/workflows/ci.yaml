---
name: CI

on:
    push:
        branches:
            - development
            - stable
    pull_request:
    schedule:
        - cron: 0 0 * * 0 # weekly

jobs:
    build-linux:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - uses: actions/setup-python@v2
              with:
                  python-version: 3.9

            - name: Install build dependencies
              uses: ./.github/actions/install-build-dependencies

            - name: Build Python wheel
              run: make bdist_wheel bdist_wheel-linux-rename
              env:
                  CC: clang
                  CXX: clang++
                  BAZEL_OPTS: --batch
                  BAZEL_FETCH_OPTS: --config=ci
                  BAZEL_BUILD_OPTS: --config=ci

            - name: Upload Python wheel
              uses: actions/upload-artifact@v2
              with:
                  name: manylinux-wheel
                  path: dist/*.whl
                  if-no-files-found: error
                  retention-days: 7

    build-macos:
        runs-on: macos-latest
        steps:
            - uses: actions/checkout@v2

            - uses: actions/setup-python@v2
              with:
                  python-version: 3.9

            - name: Install build dependencies
              uses: ./.github/actions/install-build-dependencies

            - name: Build Python wheel
              run: make bdist_wheel
              env:
                  BAZEL_OPTS: --batch
                  BAZEL_FETCH_OPTS: --config=ci
                  BAZEL_BUILD_OPTS: --config=ci

            - name: Upload Python wheel
              uses: actions/upload-artifact@v2
              with:
                  name: macos-wheel
                  path: dist/*.whl
                  if-no-files-found: error
                  retention-days: 7

    test-linux:
        needs: build-linux
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python: [3.6, 3.7, 3.8, 3.9]
        steps:
            - uses: actions/checkout@v2

            - name: Set up Python ${{ matrix.python }}
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python }}

            - name: Download Python wheel
              uses: actions/download-artifact@v2
              with:
                  name: manylinux-wheel

            - name: Install wheel
              run: python -m pip install *.whl

            - name: Install runtime dependencies
              uses: ./.github/actions/install-runtime-dependencies

            - name: Install test dependencies
              run: python -m pip install -r tests/requirements.txt

            - name: Run the test suite
              run: make install-test-cov TEST_TARGET="tests" PYTEST_ARGS="--ignore tests/llvm"

            - name: Prepare the code coverage report
              run: mv -v coverage.xml coverage-${{ env.GITHUB_RUN_NUMBER }}-${{ env.GITHUB_JOB }}-linux-${{ matrix.python }}.xml

            - name: Upload code coverage report wheel
              uses: actions/upload-artifact@v2
              with:
                  name: coverage-${{ env.GITHUB_RUN_NUMBER }}
                  path: coverage-*.xml
                  if-no-files-found: error
                  retention-days: 1

    test-macos:
        needs: build-macos
        runs-on: macos-latest
        strategy:
            fail-fast: false
            matrix:
                python: [3.8, 3.9]
        steps:
            - uses: actions/checkout@v2

            - name: Set up Python ${{ matrix.python }}
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python }}

            - name: Download Python wheel
              uses: actions/download-artifact@v2
              with:
                  name: macos-wheel

            - name: Install wheel
              run: python -m pip install *.whl

            - name: Install runtime dependencies
              uses: ./.github/actions/install-runtime-dependencies

            - name: Install test dependencies
              run: python -m pip install -r tests/requirements.txt

            - name: Run the test suite
              run: make install-test-cov TEST_TARGET="tests" PYTEST_ARGS="--ignore tests/llvm"

            - name: Prepare the code coverage report
              run: mv -v coverage.xml coverage-${{ env.GITHUB_RUN_NUMBER }}-${{ env.GITHUB_JOB }}-macos-${{ matrix.python }}.xml

            - name: Upload code coverage report wheel
              uses: actions/upload-artifact@v2
              with:
                  name: coverage-${{ env.GITHUB_RUN_NUMBER }}
                  path: coverage-*.xml
                  if-no-files-found: error
                  retention-days: 1

    test-llvm-env-linux:
        needs: build-linux
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python: [3.6, 3.7, 3.8, 3.9]
        steps:
            - uses: actions/checkout@v2

            - name: Set up Python ${{ matrix.python }}
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python }}

            - name: Download Python wheel
              uses: actions/download-artifact@v2
              with:
                  name: manylinux-wheel

            - name: Install wheel
              run: python -m pip install *.whl

            - name: Install runtime dependencies
              uses: ./.github/actions/install-runtime-dependencies

            - name: Install test dependencies
              run: python -m pip install -r tests/requirements.txt

            - name: Run the test suite
              run: make install-test TEST_TARGET="tests/llvm"

    test-llvm-env-macos:
        needs: build-macos
        runs-on: macos-latest
        strategy:
            fail-fast: false
            matrix:
                python: [3.8, 3.9]
        steps:
            - uses: actions/checkout@v2

            - name: Set up Python ${{ matrix.python }}
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python }}

            - name: Download Python wheel
              uses: actions/download-artifact@v2
              with:
                  name: macos-wheel

            - name: Install wheel
              run: python -m pip install *.whl

            - name: Install runtime dependencies
              uses: ./.github/actions/install-runtime-dependencies

            - name: Install test dependencies
              run: python -m pip install -r tests/requirements.txt

            - name: Run the test suite
              run: make install-test TEST_TARGET="tests/llvm"

    test-examples-linux:
        needs: build-linux
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python: [3.6, 3.7, 3.8, 3.9]
        steps:
            - uses: actions/checkout@v2

            - name: Set up Python ${{ matrix.python }}
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python }}

            - name: Download Python wheel
              uses: actions/download-artifact@v2
              with:
                  name: manylinux-wheel

            - name: Install wheel
              run: python -m pip install *.whl

            - name: Install runtime dependencies
              uses: ./.github/actions/install-runtime-dependencies

            - name: Install test dependencies
              run: python -m pip install -r examples/requirements.txt -r tests/requirements.txt

            - name: Run the test suite
              run: make install-test TEST_TARGET="examples"

    test-examples-macos:
        needs: build-macos
        runs-on: macos-latest
        strategy:
            fail-fast: false
            matrix:
                python: [3.8, 3.9]
        steps:
            - uses: actions/checkout@v2

            - name: Set up Python ${{ matrix.python }}
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python }}

            - name: Download Python wheel
              uses: actions/download-artifact@v2
              with:
                  name: macos-wheel

            - name: Install wheel
              run: python -m pip install *.whl

            - name: Install runtime dependencies
              uses: ./.github/actions/install-runtime-dependencies

            - name: Install test dependencies
              run: python -m pip install -r examples/requirements.txt -r tests/requirements.txt

            - name: Run the test suite
              run: make install-test TEST_TARGET="examples"

    code-coverage:
        # TODO: Add support for test-examples and test-llvm-env jobs.
        needs: [test-linux, test-macos]
        if: ${{ always() }}
        runs-on: ubuntu-latest
        steps:
            - name: Download cover coverage reports
              uses: actions/download-artifact@v2
              with:
                  name: coverage-${{ env.GITHUB_RUN_NUMBER }}

            - name: List the coverage reports
              run: ls -lh coverage*.xml

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v2
              with:
                  files: ./coverage-*.xml
                  fail_ci_if_error: true
                  verbose: true

    build-asan-llvm-service:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: Setup python
              uses: actions/setup-python@v2
              with:
                  python-version: 3.9

            - name: Install build dependencies
              uses: ./.github/actions/install-build-dependencies

            - name: Build address sanitized LLVM compiler service
              run: make bazel-build BAZEL_BUILD_OPTS=--config=asan BUILD_TARGET=//compiler_gym/envs/llvm/service:compiler_gym-llvm-service
              env:
                  CC: clang
                  CXX: clang++
                  BAZEL_OPTS: --batch
                  BAZEL_FETCH_OPTS: --config=ci
                  BAZEL_BUILD_OPTS: --config=ci

            - name: Upload address sanitized LLVM compiler service
              uses: actions/upload-artifact@v2
              with:
                  name: compiler_gym-llvm-service-linux-asan
                  path: bazel-bin/compiler_gym/envs/llvm/service/compiler_gym-llvm-service
                  if-no-files-found: error
                  retention-days: 7

    asan-llvm-tests:
        runs-on: ubuntu-latest
        needs: [build-linux, build-asan-llvm-service]
        steps:
            - uses: actions/checkout@v2

            - name: Setup python
              uses: actions/setup-python@v2
              with:
                  python-version: 3.9

            - name: Download Python wheel
              uses: actions/download-artifact@v2
              with:
                  name: manylinux-wheel

            - name: Download address sanitized LLVM compiler service
              uses: actions/download-artifact@v2
              with:
                  name: compiler_gym-llvm-service-linux-asan

            - name: Repack wheel
              run: |
                  python -m pip install -U wheel
                  wheel unpack *.whl
                  rm *.whl
                  chmod +x compiler_gym-llvm-service
                  chmod +x compiler_gym-*/compiler_gym-*.data/purelib/compiler_gym/third_party/csmith/csmith/bin/csmith
                  mv compiler_gym-llvm-service compiler_gym-*/compiler_gym-*.data/purelib/compiler_gym/envs/llvm/service/compiler_gym-llvm-service
                  wheel pack compiler_gym-*

            - name: Install wheel
              run: python -m pip install *.whl

            - name: Install runtime dependencies
              uses: ./.github/actions/install-runtime-dependencies

            - name: Install test dependencies
              run: python -m pip install -r tests/requirements.txt

            - name: Test
              run: make install-test TEST_TARGET=tests/llvm
              env:
                  ASAN_OPTIONS: detect_leaks=1
                  CC: clang
                  CXX: clang++
